/*
 * lib/pg_statsinfo.sql.in
 *
 * Copyright (c) 2009-2024, NIPPON TELEGRAPH AND TELEPHONE CORPORATION
 */

-- Adjust this setting to control where the objects get created.
SET search_path = public;

BEGIN;

SET LOCAL client_min_messages = WARNING;

CREATE SCHEMA statsinfo;
REVOKE ALL ON SCHEMA statsinfo FROM PUBLIC;

--
-- statsinfo.array_agg()
--
CREATE AGGREGATE statsinfo.array_agg(anycompatible)
(
	SFUNC=array_append,
	STYPE=anycompatiblearray,
	INITCOND='{}'
);

--
-- statsinfo.sample()
--
CREATE FUNCTION statsinfo.sample() RETURNS void
AS 'MODULE_PATHNAME', 'statsinfo_sample'
LANGUAGE C STRICT;

--
-- statsinfo.sample_wait_sampling()
--
CREATE FUNCTION statsinfo.sample_wait_sampling() RETURNS void
AS 'MODULE_PATHNAME', 'statsinfo_sample_wait_sampling'
LANGUAGE C STRICT;

--
-- statsinfo.activity()
--
CREATE FUNCTION statsinfo.activity(
	OUT idle			integer,
	OUT idle_in_xact	integer,
	OUT waiting			integer,
	OUT running			integer,
	OUT backends		integer)
AS 'MODULE_PATHNAME', 'statsinfo_activity'
LANGUAGE C STRICT;

--
-- statsinfo.long_xact()
--
CREATE FUNCTION statsinfo.long_xact(
	OUT client			text,
	OUT pid				integer,
	OUT start			timestamptz,
	OUT duration		float8,
	OUT query			text)
RETURNS SETOF record
AS 'MODULE_PATHNAME', 'statsinfo_long_xact'
LANGUAGE C STRICT;

--
-- statsinfo.snapshot()
--
CREATE FUNCTION statsinfo.snapshot(comment text) RETURNS void
AS 'MODULE_PATHNAME', 'statsinfo_snapshot'
LANGUAGE C;

CREATE FUNCTION statsinfo.snapshot() RETURNS void
AS 'MODULE_PATHNAME', 'statsinfo_snapshot'
LANGUAGE C;

--
-- statsinfo.maintenance()
--
CREATE FUNCTION statsinfo.maintenance(repository_keep_period timestamptz) RETURNS void
AS 'MODULE_PATHNAME', 'statsinfo_maintenance'
LANGUAGE C;

--
-- statsinfo.tablespaces()
--
CREATE FUNCTION statsinfo.tablespaces(
	OUT oid oid,
	OUT name text,
	OUT location text,
	OUT device text,
	OUT avail bigint,
	OUT total bigint,
	OUT spcoptions text[])
RETURNS SETOF record
AS 'MODULE_PATHNAME', 'statsinfo_tablespaces'
LANGUAGE C STRICT;

CREATE VIEW statsinfo.tablespaces AS
	SELECT * FROM statsinfo.tablespaces();

--
-- statsinfo.start()
--
CREATE FUNCTION statsinfo.start(timeout integer) RETURNS void
AS 'MODULE_PATHNAME', 'statsinfo_start'
LANGUAGE C;

--
-- statsinfo.stop()
--
CREATE FUNCTION statsinfo.stop(timeout integer) RETURNS void
AS 'MODULE_PATHNAME', 'statsinfo_stop'
LANGUAGE C;

--
-- statsinfo.cpustats()
--
CREATE TYPE statsinfo.cpustats_type AS
(
	cpu_user	bigint,
	cpu_system	bigint,
	cpu_idle	bigint,
	cpu_iowait	bigint
);

CREATE FUNCTION statsinfo.cpustats
(
	IN  prev_cpustats	statsinfo.cpustats_type,
	OUT cpu_id			text,
	OUT cpu_user		bigint,
	OUT cpu_system		bigint,
	OUT cpu_idle		bigint,
	OUT cpu_iowait		bigint,
	OUT overflow_user	smallint,
	OUT overflow_system	smallint,
	OUT overflow_idle	smallint,
	OUT overflow_iowait	smallint
)
RETURNS SETOF record
AS 'MODULE_PATHNAME', 'statsinfo_cpustats'
LANGUAGE C STRICT;

CREATE FUNCTION statsinfo.cpustats
(
	OUT cpu_id			text,
	OUT cpu_user		bigint,
	OUT cpu_system		bigint,
	OUT cpu_idle		bigint,
	OUT cpu_iowait		bigint,
	OUT overflow_user	smallint,
	OUT overflow_system	smallint,
	OUT overflow_idle	smallint,
	OUT overflow_iowait	smallint
)
RETURNS SETOF record
AS 'MODULE_PATHNAME', 'statsinfo_cpustats_noarg'
LANGUAGE C STRICT;

--
-- statsinfo.devicestats()
--
CREATE FUNCTION statsinfo.devicestats
(
	OUT device_major		text,
	OUT device_minor		text,
	OUT device_name			text,
	OUT device_readsector	bigint,
	OUT device_readtime		bigint,
	OUT device_writesector	bigint,
	OUT device_writetime	bigint,
	OUT device_ioqueue		bigint,
	OUT device_iototaltime	bigint,	
	OUT device_rsps_max		float8,
	OUT device_wsps_max		float8,
	OUT overflow_drs		smallint,
	OUT overflow_drt		smallint,
	OUT overflow_dws		smallint,
	OUT overflow_dwt		smallint,
	OUT overflow_dit		smallint,
	OUT device_tblspaces	name[]
)
RETURNS SETOF record
AS 'MODULE_PATHNAME', 'statsinfo_devicestats'
LANGUAGE C;

--
-- statsinfo.loadavg()
--
CREATE FUNCTION statsinfo.loadavg
(
	OUT loadavg1	real,
	OUT loadavg5	real,
	OUT loadavg15	real
)
RETURNS SETOF record
AS 'MODULE_PATHNAME', 'statsinfo_loadavg'
LANGUAGE C;

--
-- statsinfo.memory()
--
CREATE FUNCTION statsinfo.memory
(
	OUT memfree		bigint,
	OUT buffers		bigint,
	OUT cached		bigint,
	OUT swap		bigint,
	OUT dirty		bigint
)
RETURNS SETOF record
AS 'MODULE_PATHNAME', 'statsinfo_memory'
LANGUAGE C;

--
-- statsinfo.profile()
--
CREATE FUNCTION statsinfo.profile
(
	OUT processing			text,
	OUT execute				bigint,
	OUT total_exec_time		double precision
)
RETURNS SETOF record
AS 'MODULE_PATHNAME', 'statsinfo_profile'
LANGUAGE C STRICT;

--
-- statsinfo.last_xact_activity()
--
CREATE FUNCTION statsinfo.last_xact_activity
(
	OUT pid		int,
	OUT xid		xid,
	OUT in_xact	bool,
	OUT queries	text
)
RETURNS SETOF record
AS 'MODULE_PATHNAME', 'statsinfo_last_xact_activity'
LANGUAGE C STRICT;

CREATE FUNCTION statsinfo.rusage(
    OUT queryid bigint,
    OUT top bool,
    OUT userid      oid,
    OUT dbid	oid,
    /* planning time */
    OUT plan_reads       bigint,	     /* total reads, in bytes */
    OUT plan_writes      bigint,	     /* total writes, in bytes */
    OUT plan_user_time   double precision,   /* total user CPU time used */
    OUT plan_system_time double precision,   /* total system CPU time used */
    OUT plan_minflts     bigint,	     /* total page reclaims (soft page faults) */
    OUT plan_majflts     bigint,	     /* total page faults (hard page faults) */
    OUT plan_nvcsws      bigint,	     /* total voluntary context switches */
    OUT plan_nivcsws     bigint,	     /* total involuntary context switches */
    /* execution time */
    OUT exec_reads       bigint,	     /* total reads, in bytes */
    OUT exec_writes      bigint,	     /* total writes, in bytes */
    OUT exec_user_time   double precision,   /* total user CPU time used */
    OUT exec_system_time double precision,   /* total system CPU time used */
    OUT exec_minflts     bigint,	     /* total page reclaims (soft page faults) */
    OUT exec_majflts     bigint,	     /* total page faults (hard page faults) */
    OUT exec_nvcsws      bigint,	     /* total voluntary context switches */
    OUT exec_nivcsws     bigint	      /* total involuntary context switches */
)
RETURNS SETOF record
AS 'MODULE_PATHNAME', 'statsinfo_rusage'
LANGUAGE C STRICT;

CREATE FUNCTION statsinfo.rusage_info(
    OUT dealloc bigint,
    OUT stats_reset timestamp with time zone
 )
RETURNS record
AS 'MODULE_PATHNAME', 'statsinfo_rusage_info'
LANGUAGE C STRICT;

CREATE FUNCTION statsinfo.rusage_reset()
RETURNS void
AS 'MODULE_PATHNAME', 'statsinfo_rusage_reset'
LANGUAGE C STRICT;

CREATE FUNCTION statsinfo.wait_sampling_profile (
	OUT dbid oid,
	OUT userid oid,
	OUT queryid bigint,
	OUT backend_type text,
	OUT event_type text,
	OUT event text,
	OUT count bigint
)
RETURNS SETOF record
AS 'MODULE_PATHNAME', 'statsinfo_wait_sampling_profile'
LANGUAGE C VOLATILE STRICT;

CREATE FUNCTION statsinfo.sample_wait_sampling_reset() RETURNS void
AS 'MODULE_PATHNAME', 'statsinfo_sample_wait_sampling_reset'
LANGUAGE C VOLATILE STRICT;

--- Define statsinfo.sample_wait_sampling_info
CREATE FUNCTION statsinfo.sample_wait_sampling_info(
	OUT dealloc bigint,
	OUT stats_reset timestamp with time zone
)
RETURNS record
AS 'MODULE_PATHNAME', 'statsinfo_sample_wait_sampling_info'
LANGUAGE C STRICT VOLATILE PARALLEL SAFE;

CREATE VIEW statsinfo.sample_wait_sampling_info AS
	SELECT * FROM statsinfo.sample_wait_sampling_info();

--
-- statsinfo.cpuinfo()
--
CREATE FUNCTION statsinfo.cpuinfo
(
	OUT vendor_id			text,
	OUT model_name			text,
	OUT cpu_mhz				real,
	OUT processors			int,
	OUT threads_per_core	int,
	OUT cores_per_socket	int,
	OUT sockets				int
)
RETURNS record
AS 'MODULE_PATHNAME', 'statsinfo_cpuinfo'
LANGUAGE C STRICT;

--
-- statsinfo.meminfo()
--
CREATE FUNCTION statsinfo.meminfo
(
	OUT mem_total			bigint
) RETURNS bigint
AS 'MODULE_PATHNAME', 'statsinfo_meminfo'
LANGUAGE C STRICT;

COMMIT;
